[{"fields": {"name": "Python"},"model": "mocking.language", "pk": "1"}, 
{"fields": {"name": "Java"},"model": "mocking.language", "pk": "2"}, 
{"fields": {"name": "C++"},"model": "mocking.language", "pk": "3"}, 
{"fields": {"name": "String"},"model": "mocking.problemcategory", "pk": "1"}, 
{"fields": {"name": "Bit Manipulation"},"model": "mocking.problemcategory", "pk": "2"}, 
{"fields": {"name": "Array"},"model": "mocking.problemcategory", "pk": "3"},
{"fields": {"name": "Contains Duplicate", 
	"description": "Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.", 
	"solution": "public boolean containsDuplicate(int[] nums) {\n    Arrays.sort(nums);\n    for (int i = 0; i < nums.length - 1; ++i) {\n        if (nums[i] == nums[i + 1]) return true;\n    }\n    return false;\n}", 
"difficulty": "1", 
"category_id": "3"}, 
"model": "mocking.problem", "pk": "1"},
{"fields": {"name": "Longest Common Prefix", 
	"description": "Write a function to find the longest common prefix string amongst an array of strings.", 
	"solution": "public String longestCommonPrefix(String[] strs) {\n    if (strs.length == 0) return \"\";\n    String prefix = strs[0];\n    for (int i = 1; i < strs.length; i++)\n        while (strs[i].indexOf(prefix) != 0) {\n            prefix = prefix.substring(0, prefix.length() - 1);\n            if (prefix.isEmpty()) return \"\";\n        }        \n    return prefix;\n}",
"difficulty": "1", 
"category_id": "1"}, 
"model": "mocking.problem", "pk": "2"},
{"fields": {"name": "Counting Bits", 
	"description": "Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.", 
	"solution": "public int[] countBits(int num) {\n    int[] f = new int[num + 1];\n    for (int i=1; i<=num; i++) f[i] = f[i >> 1] + (i & 1);\n    return f;\n}",
"difficulty": "2", 
"category_id": "2"}, 
"model": "mocking.problem", "pk": "3"}
]